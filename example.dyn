module main;

io := use std:io;
heap := use std.io;

BasicEnum := enum {
	item,
	other,
	float,
	something,
	chained,
};

PartneredEnum := enum {
	something2 := 1;
	item: i32,
	other: i12,
	float: f32,
	something: struct {},
	chained: enum {},
	err: error {},
};

BasicError := error {
	something := 1;
	cool,
	message,
};

PartneredError := error {
	something := 1;
	cool: PartneredEnum,
	message: []u8,
};

AStruct := struct {
	items: i32,
	here: i32,
	other: []i32,
	new := () AStruct => .{ items: 0, here: 0, other: [] };
};

List := (comp type)!;

main := () ! {
	x := 2;
	y: i32 = 2;
	mut z := 2;
	single: f32 = 1.0;
	double: f64 = 1.0;
	char := 'a';
	boolean := false;

	optional_val: ?i32 = 100;
	mut optional_val2: ?i32 = null;

	io.println("Optional val: {}", if optional_val: |v| v else "null");
	io.println("Optional_val: {}", optional_val.?);
	a := optional_val2 ?? 4;
	optional_val2 = 4;
	b := optional_val2 ?? 0;

	immut_val: i32 = 1;
	mut mut_val: i32 = 1;
	immut_val_ptr := &immut_val;
	mut_val_ptr: *i32 = &mut_val;
	mut mut_mut_val_ptr: *i32 = &mut_val;
	io.print("immut_val == dereferenced immut_val_ptr? {}", immut_val == immut_val_ptr.*);

	mut_val_ptr.* += 1;
	mut_mut_val_ptr = undefined;

	mut nums := [1,2,3,4,5];
	nums2: []i32 = [];
	nums[0] *= 2;
	nums[1] = 4;
	nums[2] += nums[2];

	yes := true;
	if yes {
		io.print("Hello World\n");
	} else {
		io.println("Uh oh\n");
	}
	if yes io.print("Hello World\n") else {
		io.print("Uh oh\n");
	}
	if yes io.print("Hello World\n") else io.println("Uh oh\n");

	io.print("{}\n", if yes "Hello World" else "Uh oh");

	some_other_optional_val: ?i32 = null;

	if some_other_optional_val: |capture| io.print("We have a val {}", capture);

	for 0..10: |i| { io.print("{}", i); }
	for 0..10, 0..10: |i, j| io.println("These increment at the same time {} {}", i, j);
	for 0..10: |i| for 0..10: |j| io.print("These increment differently {} {}", i, j);
	some_other_array := [1,2,3];
	for some_other_array: |i| io.print("Arr val: {}", i);
	for some_other_array, 0..some_other_array.len: |i, j| io.print("Arr ind: {}, arr val: {}", j, i);

	mut while_val: i32 = 0;
	while while_val < 10 i += 1;
	while_val = 0;
	while while_val < 10 {
		io.print("While val: {}", while_val);
		while_val += 1;
	}
	mut another_while_val: ?i32 = while_val;
	while another_while_val: |mut i| {
		io.print("While val: {}", i);
		if i < 10 another_while_val = null;
	}

	defer io.print("This prints last");
	defer if yes io.print("This prints third");
	defer {
		io.print("This prints first");
		io.print("This prints second");
	}

	internal_fn := () { io.print("Im an internal fn"); };
	internal_fn();
	some_number := () i32 { return 100; };
	some_number2 := () i32 => 100;
	some_math := (x: i32, y: i32) i32 => x + y;
	some_math2 := (x, y: i32) i32 { return x + y; };
	mut res := 0;
	manipulate_args := (x, y: i32, res: *i32) => res.* = x + y;
	manipulate_args(1,2,&res);
	MathFn: type = (i32,i32)i32;
	do_math : fn = (math: MathFn, x, y: i32) => math(x, y);
	do_math((x,y: i32) => x + (2 * y), 1,2);

	basic_enum := .item;
	partnered_enum := .item(2);
	basic_error := .cool;
	partnered_error := .cool(.other(1));
	a_struct := .AStruct{ items: 12, here: 12, other: [] };
	a_struct2 : AStruct = .{ items: 12, here: 12, other: [] };
	a_struct3 := AStruct.new();
	io.print("{} {} {}", a_struct.items, a_struct2.here, a_struct3.other);
	a_function_with_stuff := (s: struct {}, en: enum {}, er: error {}) type => struct {};

	a_cool_cool_num := 3;
	match a_cool_cool_num {
		0: io.print("A 0"),
		1..12: io.print("In this range"),
		13..17, 20..30: io.print("Weird range for this but it works"),
		_: io.print("The default case")
	}

	a_cool_match_thing := match a_cool_num {
		1..12: a_cool_number,
		_: block: {
			break :blk 13;
		}
	};

	match basic_enum {
		.item: io.print("item"),
		.other: io.print("other"),
		.float: io.print("float"),
		.something: io.print("something"),
		.chained: io.print("chained")
	}

	match partnered_enum {
		.item: |c| io.print("c: {}", c),
		.other: |c| io.print("c: {}", c),
		.float: |c| io.print("c: {}", c),
		.something: |c| io.print("c: {}", c),
		.chained: |c| io.print("c: {}", c),
		_: io.print("We dont care about the rest")
	}

	List := (T: comp type) type => struct {};
	print_things_at_comptime := () => io.print("We are a thing");
	comp print_thing_at_comptime();
	return_pi := () f32 => 3.14;
	pi := comp return_pi();
	inline for 0..12: |i| io.print("Woah\n");
	inline_fn := inline () => io.print("This fn gets written out in place of each call");
	inline_fn();

	label: {

  	}

	DivideError := error {
		DivideByZero,
	};

	divide := (x,y) f32!DivideError => if y == 0 DivideError.DivideByZero else x / y;

	try divide(1,1);
	v := divide(1,0) catch |e| blk: {
		io.print("We got an error {}", e);
		break :blk 1;
	};
	other_error_fn := () ! {
		defer |e| {}
	};
};
