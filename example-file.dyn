module "main";

main := () {
  primitives();
  optionals();
  pointers();
  arrays();
  if_statements();
  match_statements();
  defer_statements();
  loops();
  functions();
  enums();
  errors();
  structs();
  metaprogramming();
  memory();
  concurrency();
};
primitives := () {
	x: i2 = 0;
	y: u5 = 1;
	single_precision: f32 = 1.0;
	double_precision: f64 = 1.0001;
	char := 'a';
	boolean := false;
};
optionals := () {
	optional_val: ?i32 = 100;
	mut optional_val_2: ?i32 = null;

	io.print("Optional val: {}", if optional_val: |v| v else "null");
	io.print("Optional val: {}", optional_val.?);
	a = optional_val_2 ?? 4;
	optional_val_2 = 4;
	b := optional_val_2 ?? 0;
};
pointers := () {
	x: i32 = 1;
	mut y: i32 = 1;
	a: *i32 = &x;
	mut b: *i32 = undefined;
	io.print("x == dereferenced a? {}", x == a.*);
	b := &y;
	b.* = 5;
};
arrays := () {
	mut nums: []i32 = .[1,2,3,4,5];
	nums[0] *= 2;
	mut nums2: []i32;
    nums[0] = 0;
    nums[1] = 1;
    nums[2] = 2;
    nums[3] = 3;
    nums[4] = 4;
};
if_statements := () {
	yes := true;
	if yes {
		io.print("This should print\n");
	} else {
		io.print("This should not print\n");
	}
	no := false;
	if no { io.print("oops\n"); } else { io.print("Everything's ok!\n"); }
};
match_statements := () {
	x = 100;
	match x {
		1: io.println("This shouldnt run\n"),
		2: io.println("This shouldnt run\n"),
		4..90:  io.println("This shouldnt run\n"),
		_: io.println("This default should run\n")
	}
};
defer_statements := () {
    defer io.println("This executes last");
    defer io.println("This executes second");
    defer {
      io.println("This executes first");
    }
};
loops := () {
	while true {
	    io.println("infinite loop, needs broken");
	    break;
	}

	for 1..100: |i| io.print("{}\n", i);

	items: []u8 = .[1,2,3,4,5];
	for items: |i| io.print("{}\n", i);
};
functions := () {
	mut local: i32 = 0;
	mut state: i32 = 0;
	mut result: i32 = undefined;
	internal_fn := () {
		io.print("{} {}", local, state);
	};
	internal_fn();
	some_number := () i32 { return 100; } 
	some_number2 := () i32 => 100; 
    some_math = (x: i32, y: i32) i32 => x + y;
    some_math_2 = (x, y: i32) i32 => x + y;
    manipulate_numbers = (result: *i32, x, y: i32) => result.* = x + y;
	() {
		io.print("Calling an anonymous funciton");
	}();
};
